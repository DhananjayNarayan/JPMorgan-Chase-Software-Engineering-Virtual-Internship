From 8bf5de6ec0d510e05fb5646fc7f13cb3baec2aff Mon Sep 17 00:00:00 2001
From: Dhananjay Narayan <dhananjayashwath@gmail.com>
Date: Thu, 23 Jul 2020 01:52:06 +0530
Subject: [PATCH] Create patch file

---
 src/App.tsx   | 26 +++++++++++++++++++-------
 src/Graph.tsx | 13 +++++++++++--
 2 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..1ed02b3 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,29 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data} />)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+    let x=0;
+    const interval = setInterval(()=>{
+      DataStreamer.getData((serverResponds: ServerRespond[])=>{
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+      });
     });
-  }
+    x++;
+    if(x>1000){
+      clearInterval(interval);
+    }
+  },100);
+}
 
   /**
    * Render the App react component
@@ -59,7 +71,7 @@ class App extends Component<{}, IState> {
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => { this.getDataFromServer() }}>
             Start Streaming Data
           </button>
           <div className="Graph">
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..1961f04 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -44,11 +44,20 @@ class Graph extends Component<IProps, {}> {
     if (window.perspective && window.perspective.worker()) {
       this.table = window.perspective.worker().table(schema);
     }
+    if (window.perspective) {
+      this.table = window.perspective.worker().table(schema);
+    }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
+      console.log('change table');
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line'); // this is the view of data
+      elem.setAttribute('column-pivots', '["stock"]'); // this allows use to distinguish stocks
+      elem.setAttribute('row-pivots', '["timestamp"]'); // this maps each datapoint based on timestamp
+      elem.setAttribute('columns', '["top_ask_price"]'); // it allows to only focus on a particular part of a stock's data
+      // aggregates helps us to handle the duplicated data
+      elem.setAttribute('aggregates', '{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
     }
   }
 
-- 
2.27.0.windows.1

